// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NanolekPrototype.Context;

namespace NanolekPrototype.Context.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210901094405_PackagingProtocolForm")]
    partial class PackagingProtocolForm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.CheckingProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualWeightOfGPPack")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormCheckingCheckweighingSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReferenceWeightOfGPPack")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("FormCheckingCheckweighingSettingId");

                    b.ToTable("CheckingProcedures");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormAssignmentForMarkingThermalTransferLabelOnCorrugatedBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<string>("GTIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InternalCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<int>("PacksInCorrugatedBox")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskGivenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskGivenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TaskGotDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskGotId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("TaskGivenId");

                    b.HasIndex("TaskGotId");

                    b.ToTable("ForMarkingThermalTransferLabelOnCorrugatedBoxes");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormCheckingCheckweighingSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.ToTable("FormCheckingCheckweighingSettings");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormCheckingRejectionOfDefectiveTablet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.ToTable("FormCheckingRejectionOfDefectiveTablets");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormControlOfPrimaryPackaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.ToTable("FormControlOfPrimaryPackagings");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormMaterialBalanceOfGPByLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CalcedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CalcedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedPUByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedPUByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExitAccordingToTheRegulations")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDateOfPacking")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompliant")
                        .HasColumnType("bit");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackagesCount")
                        .HasColumnType("int");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShiftMasterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDateOfPacking")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CalcedByUserId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CheckedPUByUserId");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("ShiftMasterId");

                    b.HasIndex("TaskMasterId");

                    b.ToTable("FormMaterialBalanceOfGpByLots");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CalcedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CalcedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefectFirstPackageUnits")
                        .HasColumnType("int");

                    b.Property<int>("EntredIntoGPPackages")
                        .HasColumnType("int");

                    b.Property<int>("EntredIntoGPUnits")
                        .HasColumnType("int");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<int>("GarbageSecondPackageUnits")
                        .HasColumnType("int");

                    b.Property<int>("GarbageUnits")
                        .HasColumnType("int");

                    b.Property<int>("GetPRP")
                        .HasColumnType("int");

                    b.Property<int>("InternalCodeOfMaterial")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondToControlIndicators")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondToShelfLife")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<string>("PartSAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleSelectionUnits")
                        .HasColumnType("int");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalcedByUserId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("FormReceptionAndMovementOfBulkProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CalcedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CalcedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseFor1000Packs")
                        .HasColumnType("int");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<int>("InternalCodeOfMaterial")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondenceEligibilityCriteria")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondsToConsumptionRate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentToStorage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredInProduction")
                        .HasColumnType("bit");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<int>("Reconciliation")
                        .HasColumnType("int");

                    b.Property<int>("RemainingMaterial")
                        .HasColumnType("int");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpentOnBatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalcedByUserId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("FormReceptionAndMovementOfPackingMaterials");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormSamplingFinishedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationNUmber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("ShiftMasterId");

                    b.HasIndex("TaskMasterId");

                    b.ToTable("FormSamplingFinishedProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormSettingUpTechnologicalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.ToTable("FormSettingUpTechnologicalEquipments");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.MovementOfBulkProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormReceptionAndMovementOfBulkProductId")
                        .HasColumnType("int");

                    b.Property<int>("GarbageKg")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("FormReceptionAndMovementOfBulkProductId");

                    b.ToTable("MovementOfBulkProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActualTemperatureOfBlisterAdhesion")
                        .HasColumnType("int");

                    b.Property<int>("ActualTemperatureOfCellFormingMax")
                        .HasColumnType("int");

                    b.Property<int>("ActualTemperatureOfCellFormingMin")
                        .HasColumnType("int");

                    b.Property<int>("BlisteringSpeed")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormControlOfPrimaryPackagingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAppereanceWithoutDefects")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBulkProductWithoutVisibleDamage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClarityMarkAndCorrugationPattern")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondsCountOfTabletsInBlister")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoilCorrespondenceToSpecification")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatchingVariableData")
                        .HasColumnType("bit");

                    b.Property<string>("TaskMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormControlOfPrimaryPackagingId");

                    b.HasIndex("TaskMasterId");

                    b.ToTable("PackagingControls");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalCodeGP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PackageNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackagingProtocolStatus")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleUserOOKId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponsibleUserTLFId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SellBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShelfLife")
                        .HasColumnType("float");

                    b.Property<string>("SpecificationGP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleUserOOKId");

                    b.HasIndex("ResponsibleUserTLFId");

                    b.ToTable("PackagingProtocols");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocolForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormRequisitesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId");

                    b.ToTable("PackagingProtocolForms");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PersonnelAccessProtocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PackagingProtocolId")
                        .HasColumnType("int");

                    b.Property<long?>("PackagingProtocolId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PackagingProtocolId1");

                    b.ToTable("PersonnelAccessProtocols");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.ProductionPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullNameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PackagingProtocolId")
                        .HasColumnType("int");

                    b.Property<long?>("PackagingProtocolId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullNameId");

                    b.HasIndex("PackagingProtocolId1");

                    b.ToTable("ProductionPersonnels");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.ReceptionOfMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticalSheetNumberOKK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormReceptionAndMovementOfPackingMaterialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoilMeetsControlParameters")
                        .HasColumnType("bit");

                    b.Property<string>("ManufacturerSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivedFoil")
                        .HasColumnType("int");

                    b.Property<int>("RemainingProduction")
                        .HasColumnType("int");

                    b.Property<string>("SAPPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormReceptionAndMovementOfPackingMaterialId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("ReceptionOfMaterials");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.SampleSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountOfSampleSelection")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeOKKId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormSamplingFinishedProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeOKKId");

                    b.HasIndex("FormSamplingFinishedProductId");

                    b.ToTable("SampleSelections");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.SettingUpTechnologicalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormSettingUpTechnologicalEquipmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceTechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormSettingUpTechnologicalEquipmentId");

                    b.HasIndex("ServiceTechnicianId");

                    b.ToTable("SettingUpTechnologicalEquipments");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.TableProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormSamplingFinishedProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProcedureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckerId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("FormSamplingFinishedProductId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("TabeProcedures");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.VerificationAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormCheckingRejectionOfDefectiveTabletId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("TaskMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormCheckingRejectionOfDefectiveTabletId");

                    b.HasIndex("TaskMasterId");

                    b.ToTable("VerificationActions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.CheckingProcedure", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.FormCheckingCheckweighingSetting", "FormCheckingCheckweighingSetting")
                        .WithMany("CheckingProcedures")
                        .HasForeignKey("FormCheckingCheckweighingSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("FormCheckingCheckweighingSetting");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormAssignmentForMarkingThermalTransferLabelOnCorrugatedBox", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("ForMarkingThermalTransferLabelOnCorrugatedBoxes")
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "TaskGiven")
                        .WithMany()
                        .HasForeignKey("TaskGivenId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "TaskGot")
                        .WithMany()
                        .HasForeignKey("TaskGotId");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("TaskGiven");

                    b.Navigation("TaskGot");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormCheckingCheckweighingSetting", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormCheckingCheckweighingSettings")
                        .HasForeignKey("PackagingProtocolId");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormCheckingRejectionOfDefectiveTablet", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormCheckingRejectionOfDefectiveTablets")
                        .HasForeignKey("PackagingProtocolId");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormControlOfPrimaryPackaging", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormControlOfPrimaryPackagings")
                        .HasForeignKey("PackagingProtocolId");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormMaterialBalanceOfGPByLot", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CalcedByUser")
                        .WithMany()
                        .HasForeignKey("CalcedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CheckedByUser")
                        .WithMany()
                        .HasForeignKey("CheckedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CheckedPUByUser")
                        .WithMany()
                        .HasForeignKey("CheckedPUByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormMaterialBalanceOfGpByLots")
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "TaskMaster")
                        .WithMany()
                        .HasForeignKey("TaskMasterId");

                    b.Navigation("CalcedByUser");

                    b.Navigation("CheckedByUser");

                    b.Navigation("CheckedPUByUser");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("ShiftMaster");

                    b.Navigation("TaskMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CalcedByUser")
                        .WithMany()
                        .HasForeignKey("CalcedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CheckedByUser")
                        .WithMany()
                        .HasForeignKey("CheckedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormReceptionAndMovementOfBulkProducts")
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("CalcedByUser");

                    b.Navigation("CheckedByUser");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CalcedByUser")
                        .WithMany()
                        .HasForeignKey("CalcedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CheckedByUser")
                        .WithMany()
                        .HasForeignKey("CheckedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormReceptionAndMovementOfPackingMaterials")
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("CalcedByUser");

                    b.Navigation("CheckedByUser");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormSamplingFinishedProduct", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormSamplingFinishedProducts")
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "TaskMaster")
                        .WithMany()
                        .HasForeignKey("TaskMasterId");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("ShiftMaster");

                    b.Navigation("TaskMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormSettingUpTechnologicalEquipment", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormSettingUpTechnologicalEquipments")
                        .HasForeignKey("PackagingProtocolId");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.MovementOfBulkProduct", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", "FormReceptionAndMovementOfBulkProduct")
                        .WithMany("MovementOfBulkProducts")
                        .HasForeignKey("FormReceptionAndMovementOfBulkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("FormReceptionAndMovementOfBulkProduct");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingControl", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.FormControlOfPrimaryPackaging", "FormControlOfPrimaryPackaging")
                        .WithMany("PackagingControls")
                        .HasForeignKey("FormControlOfPrimaryPackagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "TaskMaster")
                        .WithMany()
                        .HasForeignKey("TaskMasterId");

                    b.Navigation("FormControlOfPrimaryPackaging");

                    b.Navigation("TaskMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocol", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ResponsibleUserOOK")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserOOKId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ResponsibleUserTLF")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserTLFId");

                    b.Navigation("ResponsibleUserOOK");

                    b.Navigation("ResponsibleUserTLF");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocolForm", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany()
                        .HasForeignKey("PackagingProtocolId");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PersonnelAccessProtocol", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("PersonnelAccessProtocols")
                        .HasForeignKey("PackagingProtocolId1");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.ProductionPersonnel", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "FullName")
                        .WithMany()
                        .HasForeignKey("FullNameId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("ProductionPersonnels")
                        .HasForeignKey("PackagingProtocolId1");

                    b.Navigation("FullName");

                    b.Navigation("PackagingProtocol");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.ReceptionOfMaterial", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", "FormReceptionAndMovementOfPackingMaterial")
                        .WithMany("ReceptionOfMaterials")
                        .HasForeignKey("FormReceptionAndMovementOfPackingMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("FormReceptionAndMovementOfPackingMaterial");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.SampleSelection", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "EmployeeOKK")
                        .WithMany()
                        .HasForeignKey("EmployeeOKKId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.FormSamplingFinishedProduct", "FormSamplingFinishedProduct")
                        .WithMany("SampleSelections")
                        .HasForeignKey("FormSamplingFinishedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeOKK");

                    b.Navigation("FormSamplingFinishedProduct");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.SettingUpTechnologicalEquipment", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.FormSettingUpTechnologicalEquipment", "FormSettingUpTechnologicalEquipment")
                        .WithMany("SettingUpTechnologicalEquipments")
                        .HasForeignKey("FormSettingUpTechnologicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ServiceTechnician")
                        .WithMany()
                        .HasForeignKey("ServiceTechnicianId");

                    b.Navigation("FormSettingUpTechnologicalEquipment");

                    b.Navigation("ServiceTechnician");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.TableProcedure", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.FormSamplingFinishedProduct", "FormSamplingFinishedProduct")
                        .WithMany("TableProcedures")
                        .HasForeignKey("FormSamplingFinishedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId");

                    b.Navigation("Checker");

                    b.Navigation("Executor");

                    b.Navigation("FormSamplingFinishedProduct");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.VerificationAction", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.FormCheckingRejectionOfDefectiveTablet", "FormCheckingRejectionOfDefectiveTablet")
                        .WithMany("VerificationActions")
                        .HasForeignKey("FormCheckingRejectionOfDefectiveTabletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "TaskMaster")
                        .WithMany()
                        .HasForeignKey("TaskMasterId");

                    b.Navigation("FormCheckingRejectionOfDefectiveTablet");

                    b.Navigation("TaskMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormCheckingCheckweighingSetting", b =>
                {
                    b.Navigation("CheckingProcedures");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormCheckingRejectionOfDefectiveTablet", b =>
                {
                    b.Navigation("VerificationActions");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormControlOfPrimaryPackaging", b =>
                {
                    b.Navigation("PackagingControls");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", b =>
                {
                    b.Navigation("MovementOfBulkProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", b =>
                {
                    b.Navigation("ReceptionOfMaterials");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormSamplingFinishedProduct", b =>
                {
                    b.Navigation("SampleSelections");

                    b.Navigation("TableProcedures");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormSettingUpTechnologicalEquipment", b =>
                {
                    b.Navigation("SettingUpTechnologicalEquipments");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocol", b =>
                {
                    b.Navigation("ForMarkingThermalTransferLabelOnCorrugatedBoxes");

                    b.Navigation("FormCheckingCheckweighingSettings");

                    b.Navigation("FormCheckingRejectionOfDefectiveTablets");

                    b.Navigation("FormControlOfPrimaryPackagings");

                    b.Navigation("FormMaterialBalanceOfGpByLots");

                    b.Navigation("FormReceptionAndMovementOfBulkProducts");

                    b.Navigation("FormReceptionAndMovementOfPackingMaterials");

                    b.Navigation("FormSamplingFinishedProducts");

                    b.Navigation("FormSettingUpTechnologicalEquipments");

                    b.Navigation("PersonnelAccessProtocols");

                    b.Navigation("ProductionPersonnels");
                });
#pragma warning restore 612, 618
        }
    }
}
