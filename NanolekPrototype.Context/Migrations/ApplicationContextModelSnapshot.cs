// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NanolekPrototype.Context;

namespace NanolekPrototype.Context.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CalcedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CalcedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefectFirstPackageUnits")
                        .HasColumnType("int");

                    b.Property<int>("EntredIntoGPPackages")
                        .HasColumnType("int");

                    b.Property<int>("EntredIntoGPUnits")
                        .HasColumnType("int");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<int>("GarbageSecondPackageUnits")
                        .HasColumnType("int");

                    b.Property<int>("GarbageUnits")
                        .HasColumnType("int");

                    b.Property<int>("GetPRP")
                        .HasColumnType("int");

                    b.Property<int>("InternalCodeOfMaterial")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondToControlIndicators")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondToShelfLife")
                        .HasColumnType("bit");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<string>("PartSAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleSelectionUnits")
                        .HasColumnType("int");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalcedByUserId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("FormReceptionAndMovementOfBulkProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CalcedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CalcedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedByUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseFor1000Packs")
                        .HasColumnType("int");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<int>("InternalCodeOfMaterial")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondenceEligibilityCriteria")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrespondsToConsumptionRate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentToStorage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredInProduction")
                        .HasColumnType("bit");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingProtocolId")
                        .HasColumnType("bigint");

                    b.Property<int>("Reconciliation")
                        .HasColumnType("int");

                    b.Property<int>("RemainingMaterial")
                        .HasColumnType("int");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpentOnBatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalcedByUserId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("PackagingProtocolId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("FormReceptionAndMovementOfPackingMaterials");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.MovementOfBulkProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormReceptionAndMovementOfBulkProductId")
                        .HasColumnType("int");

                    b.Property<int>("GarbageKg")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("FormReceptionAndMovementOfBulkProductId");

                    b.ToTable("MovementOfBulkProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalCodeGP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PackageNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackagingProtocolStatus")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleUserOOKId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponsibleUserTLFId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SellBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShelfLife")
                        .HasColumnType("float");

                    b.Property<string>("SpecificationGP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleUserOOKId");

                    b.HasIndex("ResponsibleUserTLFId");

                    b.ToTable("PackagingProtocols");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.ReceptionOfMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticalSheetNumberOKK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormReceptionAndMovementOfPackingMaterialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoilMeetsControlParameters")
                        .HasColumnType("bit");

                    b.Property<string>("ManufacturerSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivedFoil")
                        .HasColumnType("int");

                    b.Property<int>("RemainingProduction")
                        .HasColumnType("int");

                    b.Property<string>("SAPPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftMasterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormReceptionAndMovementOfPackingMaterialId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("ResReceptionOfMaterials");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CalcedByUser")
                        .WithMany()
                        .HasForeignKey("CalcedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CheckedByUser")
                        .WithMany()
                        .HasForeignKey("CheckedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany("FormReceptionAndMovementOfBulkProducts")
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("CalcedByUser");

                    b.Navigation("CheckedByUser");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CalcedByUser")
                        .WithMany()
                        .HasForeignKey("CalcedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "CheckedByUser")
                        .WithMany()
                        .HasForeignKey("CheckedByUserId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.PackagingProtocol", "PackagingProtocol")
                        .WithMany()
                        .HasForeignKey("PackagingProtocolId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("CalcedByUser");

                    b.Navigation("CheckedByUser");

                    b.Navigation("PackagingProtocol");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.MovementOfBulkProduct", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", "FormReceptionAndMovementOfBulkProduct")
                        .WithMany("MovementOfBulkProducts")
                        .HasForeignKey("FormReceptionAndMovementOfBulkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("FormReceptionAndMovementOfBulkProduct");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocol", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ResponsibleUserOOK")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserOOKId");

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ResponsibleUserTLF")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserTLFId");

                    b.Navigation("ResponsibleUserOOK");

                    b.Navigation("ResponsibleUserTLF");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.ReceptionOfMaterial", b =>
                {
                    b.HasOne("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", "FormReceptionAndMovementOfPackingMaterial")
                        .WithMany("ReceptionOfMaterials")
                        .HasForeignKey("FormReceptionAndMovementOfPackingMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanolekPrototype.EntityModels.Models.User", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("FormReceptionAndMovementOfPackingMaterial");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfBulkProduct", b =>
                {
                    b.Navigation("MovementOfBulkProducts");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.FormReceptionAndMovementOfPackingMaterial", b =>
                {
                    b.Navigation("ReceptionOfMaterials");
                });

            modelBuilder.Entity("NanolekPrototype.EntityModels.Models.PackagingProtocol", b =>
                {
                    b.Navigation("FormReceptionAndMovementOfBulkProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
